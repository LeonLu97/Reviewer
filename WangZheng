问题：怎么从按钮看后台对应函数？
问题：Hibernate原理和使用方法 session用法

添加一个配置项需要修改啥？
1、EBSDomainObject
2、ValidateUtil
3、beforetreatment.xml 用户群组相关
4、dispatch_ne.xml 增量
5、ebsAfterTreatment.xml和*_AT.xml 用户群组相关

6、全同步


界面：
	ebs_fleet_list.ftl
	ebs_fleet_isdn_range_input.ftl
	
对象：
	UDCFleetIsdnRange extends EBSDomainObject //所有配置对象继承EBSDomainObject
	UDCFleet
	
逻辑代码：
	EbsFleetIsdnRangeAction

		EbsFleetIsdnRangeAction.save()
			|
			|->UDCSyncHandler.isHandleFleetRange() //确认是否有在操作fleet，RMI远程调用
				|
				|->失败返回错误信息ajax(map)
			|
			|->UDCSyncHandler.setHandleFleetRange(true) 申请锁
			|
			|->addType // 怎么传进来的？
				|
				|->defaultSave()
					|
					|->OpterationStateManagement.checkSyncFlag() //查看是否有同步操作
					|
					|->udcFleet = OPMDAOImpl.getOneBeanByKey() //获取fleet
					|
					|->BaseAdminAction.isSupport3GPP()
						|
						|->ZoneStatusServiceImpl.getZoneStatusByZoneId()
							|
							|->处于同步中，返回
					|
					|->fleetImsiRange赋值udcFleet
					|
					|->ServerForClientItfImpl.sendOneCommand() // obj 为 UDCFleetIsdnRange
						|
						|->EBSOperationAgent.operateOneCommand()
							|
							|->GlobalLock.getInstance().lock() //全局锁锁住
							|
							|->EBSOperationAgent.operateOneCommandDB()
								|
								|->getSession() //获取hibernate session
								|
								|->MOD模式
									|
									|->setOldEbsDomainObject() //获取老的
										|
										|->CascadedTableDataHandleUtils.getOldEBSDomainObject()
									|
									|->session.clear() //清除缓存
								|
								|->EBSOperationAgent.executeUdcOpt()
									|
									|->EBSServiceHelper.getEbsFdn() //只有DEVFDN和UDCFDN，这个配置是后者,如果是EBS对象，公共校验
									|
									|->OPMDAOZoneObjQuery.queryUDCLocalConfig().getWorkState() //获取配置模式 opm_udc_local_config表中workstate
									|
									|->OPMDAOZoneObjQuery.getUDCPhytype() //获取工作模式opm_udc_local_config表中 phytype
									|
									|->UdcSyncCfgUtil.getSyncInfo()
										|
										|->UdcSyncCfgUtil.parserXML(udc_sync.xml)
										|
										|->UdcSyncCfgUtil.parseElement()
										|
										|->return UdcSyncInfo // objname相同且phyType相同
									|
									|->EBSOperationAgent.judgeIops() //IOPS是故障单站，不会以主控形态进行运行，为了防止乱用就加了个限制
									|
									|->TableConstants.UDC_WORKSTATE_MAST //主控模式下
										|
										|->ValidateUtil.validate()
											|
											|->获取neVersion // "UDC"、"DEV"、"V100R003"等，次对象为"UDC"
											|
											|->CommonUtil.getNeType() //获取网元类型Ne
											|
											|->ValidateUtil.getValidationList() 
												|
												|->ValidationCfg.init() // opmValidation-oxm.xml /EME/V100R005/xxxx.xml 加载校验函数
												|
												|->ValidationCfg.initOperationMap() 
											|
											|->validate.validate() 执行上述加载的校验函数
										|
										|->EBSOperationAgent.validateCommon()  //5.1 校验组件
											|
											|->ModelAnalyze.check() //只有ADD和MOD会跑进来
												|
												|->validateModelMap.get(ebsType) // 获取omc-opm-server\src\main\conf\model\modelConfig.xls中规则
												|
												|->ModelAnalyze.getFiledsInfo() // 获取配置参数类型、名称、值
												|
												|->ruleInterpreter.interpret() //通过反射找到校验函数并执行
									|
									|->BeforeTreatmentBiz.beforeTreatment()
										|
										|->BeforeTreatmentBiz.getBeforeFilterList()
											|
											|->BeforeTreatmentCfg.init() // 加载 "ebsBefore-oxm.xml"和 "beforetreatment.xml"
											|
											|->BeforeTreatmentCfg.initFilterMap() //获取到最终的校验函数列表 beforetreatment.xml
										|
										|->beforeTreat.beforeTreatment() //直接执行xml中函数
									|
									|->UdcLicenseContrlFactory.getCurUsedLicNumbyMoc()  //看一下当前使用量， todo 未细看
									|
									|->EBSOperationAgent.updateEbsObj() // ADD MOD DEL ... 先看add
										|
										|->AESServiceImpl.processModIfNeedAES() //将部分参数进行AES加密
										|
										|->session.save(obj) // Hibernate session保存，需要看一下Hibernate机制
									|
									|->RelateEbsObjUtil.relateEbsObj() //获取关联对象，并执行关联操作
										|
										|->RelateEbsObjCfg.getControlBeanClassName()  //读取 "relateEbsObj.xml" 中的相关类路径
										|
										|->RelateEbsObjCfg.getRelateEbsObjByClassPath() 实例化相关类
										|
										|->relateEbsObjAdd //执行xml类中相关操作
									|
									|->UdcLicenseContrlFactory.checkLicenseItem() //检查license，如果超量就抛出异常，回滚 todo 没看到回滚怎么操作的？
									|
									|->通知机制 关联对象处理
										|
										|->notifyTaskExecute(TaskStatus.TASK_BEGIN) //通知给谁了呢？ todo
										|
										|->DispatchZoneObjUtil.DispatchZoneObj()
											|
											|->DispatchZoneObjCfg.getControlBeanClassName() //获取 "dispatchZoneObj.xml"
											|
											|->DispatchZoneObjCfg.getDispatchZoneByClassPath() //获取实例化类
									
										|
										|->DispatchFleetObjUtil.DispatchFleetObj()
											|
											|->DispatchFleetGroup.dispatchFleetObj()
												|
												|->DispatchFleetObjItfImpl.setFleetObjByIsdn() //组成增删的sql并在session中执行
												|
												|->dispatchZoneObjAdd
										|
										|->EBSOperationAgent.dispatchDevEbsObj
											|
											|->DispatchUtil.getDispatchObjListDev()
												|
												|->DispatchUtil.getDispatchFilterListDev() "ebsDispatchNe-oxm.xml" "dispatch_dev.xml"
									|
									|->DispatchZoneObjUtil.DispatchZoneObj() //处理本条记录，写Zoneobj
									|
									|->EBSOperationAgent.afterTreatmentDispatchEbsObj()
										|
										|->AfterTreatmentBiz.afterTreatment() //读取 ebsAfterTreatment.xml和*_AT.xml
											|
											|->afterTreatment 执行xml中的函数
										
										|
										|->DispatchUtil.getDispatchObjList()  //读取 "dispatch_ne.xml" 获取需要下发的对象参数列表
											|
											|->AfterTreatmentBiz.afterTreatment() //其他网元也执行 
									|
									|->SubnetAllSyncStatusServiceImpl.updateSubnetSyncStsByHeartBeat() //当添加、修改、删除的信息需要被上级子网同步时，通过心跳的方式，更改同步状态
									|
									|->EBSOperationAgent.updateFleetStatus()
										|
										|->UdcSyncCfgUtil.getSyncInfo() //读取 "udc_sync.xml"，查看是否需要同步
										|
										|->FleetStatusCacheCenter.updateAllFleetStatus() //更新缓存状态NEW_DATA_UNEXPORTED
								|
								|->transaction.commit(); //提交事务
							|
							|->HttpNotifyMgr.notify()  //通知网关
								|
								|->routesCache.get() //读取ebs_http_notify.xml
								|
								|—>NotifyEgwImpl.getTarget() //获取Http地址列表
								|
								|->HttpNotifyMgr.sendHttpMsg()
							|
							|->UDCCascadeTableMgr.sendTableDataRspMsg() zmq通知UIS AAS
								|
								|->UDCCascadeTableMgr.CheckTableSubscribeState() //读取"udc_subdbtable.xml"
								|
								|->ZmqService.notify()
							|
							|->EBSOperationAgent.operateOneCommandUdc() //节点车数据分发 到UDC http
								|
								|->EBSOperationAgent.initIopsZoneMap() //从表opm_zone中读取zone_type = 5的
								|
								|->EBSOperationAgent.initZoneConfigMap() //读取opm_zone_config JOIN opm_zone
								|
								|->IOPS_ZONE设置同步状态
								|
								|->zoneConfig.getLastLoginPhyid().equals("0") //判断车的物理标识，0表示未有绑定的zone，不需要增量同步
								|
								|->patchService.getVersionInfo().getInterfaceVer(); //版本号不同，不同步
								|
								|->syncDependency //从udc_sync.xml中读取获取UDCSyncDataDependencyItf 
								|
								|->syncDependency.removeDependency() //修改原始数据，比如移除id
								|
								|->CommondZone.addCommand()
									|
									|->CommondZone.enQueueToCache()//将命令入缓存对列，后续用并发线程处理
									|
									|->CommandZoneScheduled.CommandZoneDispatcher.run() 独立线程发送，每秒一次，同步开关打开不发
										|
										|->CommondZone.sendCommandZone()
											|
											|->SessionUrlManager.sendHttpsMessage()
							|
							|->EBSOperationAgent.batchOperateOneCommandNe()
								|
								|->ON_LINE_SYNCING 同步中，返回
								|
								|->EBSOperationAgent.splitMmlBeanList() //分离前处理、后处理命令，即顺序
								|
								|->EBSOperationAgent.doBatchOperateOneCommandNe() 
									|
									|->SLAVEZONEMOCID //节点的不走下面流程
									|
									|->NeCommondManager.constructNeCommand() //http优化开关打开，批量处理
										|
										|->NeCmdQueueFactory.createCmdQueue() //创建各个网元的处理队列
										|
										|->UdcCmdQueueImpl.createNeCommand()
											|
											|->MdcCmdQueueImpl.getBeanServer() //加载 各个网元，各个版本的"NeBaseNeBeanControl.xml"
											|
											|->CreateMDCObjectServerImpl.createMMLBeanList() // 单个参数，批量
												|
												|->CommandManager.addCommand() 
									|
									|->NeBeanControlServerImpl.constructNeBeanList()
										|
										|->getControlBeanClassName() //获取 "BaseNeBeanControl.xml"实例
										|
										|->CreateMDCObjectServerImpl.createMMLBeanList() // 多个参数，单个执行
											|
											|->commandManager.addCommand()
												|
												|->CommandTransfer.executeCommand()
													|
													|->MedOPMServiceImpl.execute() //找进程初始化位置才能看到注册类的位置
														|
														|->最终调用到了managedElement.send() //各个网元对接都不同



____________________________________________________________________________________________

全同步UDC 核心文件udc_sync.xml

从UDC
	EbsUdcLocalcfgAction.allSync
		|
		|->ServerForClientItfImpl.processAllSync
			|
			|->UDCSyncHandler.udcNodeAllSyncReq
				|
				|->sendHttpsMessage  //"/v1.0/UDC/allSyncRequest"
				|
				|->udcNodeSyncTask
					|
					|->UdcNodeSyncImport.syncProcess
						|
						|->downloadFile 通过http（网闸）或者ftp下载文件
						|
						|->clear 
							|
							|->清掉所有zoneobj fleetobj devobj数据
							|
							|->UDCSyncCleaner.cleaningForUser
								|
								|->getSyncInfoList udc_sync.xml
									|
									|->版本不一致，且直接跳过
									|
									|->processClearData  从UDC清除数据时,如果清除对象的版本高于主控UDC的版本时，则不清除。
									|
									|->getRelateObjList 清除关联对象
									|
									|->deleteAll 清除自己
						|
						|->importFile
							|
							|->importFileforVersionCompatible //版本号不一致调用
								|
								|->UDCImportManager.importUdcFile
									|
									|->parseEbsObjectFromFile //解析Jasn格式到EBSobj
									|
									|->getUdcSyncExportList
										|
										|->addEbsObjectList
											|
											|->batchOperateCommand
												|
												|->saveSyncObj2DB
													|
													|->saveObj2DB //写db
													|
													|->DispatchZoneObj //写zoneobj
													|
													|->afterTreatmentDispatchEbsObj
							|
							|->getUdcSyncExportList 同版本
								|
								|->importDataFile
									|
									|->importDataforUdcSync.sh 从dump文件放入临时表
									|
									|->executeManySQLUpdate 临时表导入
								|
								|->getRelateObjList 关联对象一并导入
									|
									|->importDataFile
						|
						|->processDevObjData debobj
					
主UDC
	UdcSyncApi.allSyncRequestHandle
		|
		|->ServerForClientItfImpl.excuteUdcSyncCmd
			|
			|->UDCSyncHandler.exportFile
				|
				|->exportFile
					|
					|->ExportManager.export
						|
						|->exportforCompatible //不同版本配套
							|
							|->UdcSyncCfgUtil.getUdcSyncExportList //解析udc_sync.xml
								|
								|->exportFromDB //SyncCompatible 为false，不支持的不进来
									|
									|->全量同步	//EXPORT_MODE_ALL mode="all"
										|
										|->listAll 
									|
									|->按照fleet同步
										|
										|->queryRelativeObjectIdForFleet 从fleetobj获取
									|
									|->removeDependency
						|
						|->同版本配套
							|
							|->getUdcSyncExportList
								|
								|->exportFromDB //不特殊处理的，无exportclass的，同上
								|
								|->exportFromDB //解析ExportClass
								|
								|->exportTableData
									|
									|->executeManySQLUpdate 创建临时表
									|
									|->executeShellCmd 临时表dump出来
								|
								|->processRelateObjExport 关联对象一并
									|
									|->sql查找关联对象
									|
									|->exportTableData 同上
									


___________________________________________________________________________________________________________
									
							用户表
	opm_user UDCUser 所有用户 *
		|
		|->opm_pttuser UDCPttuser //终端用户 *
			|
			|->CallInhibited opm_callinhibited //呼入呼出策略 *
			|
			|->UDCImeiBaseInfo 
			|
			|->UDCHusim
			|
			|->UDCImeiBaseInfo
		|
		|->opm_sipuser //固定用户 *
			|
			|->udcIPCAttribute opm_ipcattribute //固定摄像头信息 *
			|
			|->gisipc opm_gisipc //摄像头位置信息 *
			|
			|->omcIpcDevice opm_omcipcdevice //摄像头对接信息 *  这个当前没有同步！！！
			|
			|->udcdcAttribute opm_dcattribute //固定用户DC号段信息
			|
			|->udcsdkAttribute opm_sdk_attribute * //网关融合用户使用
		|
		|->opm_watermark * //只有终端和记录仪有
		
opm_pttuser *
opm_user*
opm_sipuser*
opm_watermark*
opm_ipcattribute *
opm_omcipcdevice *
opm_gisipc *
opm_dcattribute *
opm_sdk_attribute *
opm_callinhibited *

opm_department 需要独立处理 级联关系被干掉了

SOR_TTR60_0005 3GPP解决方案分布式组网
SUBNETWORK
UDCSubNetwork
ALTER TABLE opm_subnetwork add COLUMN (`system_mode` INT(2) UNSIGNED DEFAULT 0 COMMENT '网络制式Mode 0：Btrunc-1 1：Btrunc-2 2:3GPP');		


_________________________________________________________________________________________________________
								
							
						增量同步

1、第一层级 子网间
2、第二层级 主从UDC之间，通过fleetobj
3、第三层级 单zone，通过zoneobj
4、第四层级 zone内设备，如MDC、核心网，通过devobj,新增设备时devobj从zoneobj生成

****obj两个作用，一个是增量同步中，mod等方法不判断需要发给谁，直接使用obj，另一个是全同步中，直接获取需要同步的对象***

dispatch_ne.xml 决定要不要发，包含从UDC、MDC、核心网等
nebase...xml 决定非UDC的网元，发送哪些字段
udc_sync.xml 全同步：增量决定发哪些字段
dispatch_dev.xml 给MDC、MRS的relate级联数据进行同步使用的

入口：
operateOneCommand
	|
	|->operateOneCommandDB // 这个会添加zoneobj、fleetobj、devobj
		|
		|->RelateEbsObjUtil.relateEbsObj	获取关联对象并放入list			relateEbsObj.xml
			|
			|->DispatchZoneObjUtil.DispatchZoneObj 填写zoneobj关联表		dispatchZoneObj.xml
			|
			|->DispatchFleetObjUtil.DispatchFleetObj 填写fleetobj关联表		硬代码，无xml
			|
			|->dispatchDevEbsObj  填写devobj关联表，同时生成mml				dispatch_dev.xml
		|
		|->DispatchZoneObjUtil.DispatchZoneObj	本条记录填写zoneobj			dispatchZoneObj.xml
		|
		|->afterTreatmentDispatchEbsObj
			|
			|->afterTreatmentBiz.afterTreatment 后处理，比如清除告警		*_AT.xml
			|
			|->DispatchUtil.getDispatchObjList 获取转发列表，更新obj关系	dispatch_ne.xml *
	|
	|->HttpNotifyMgr.instance().notify 						网关http同步  	ebs_http_notify.xml
	|
	|->UDCCascadeTableMgr.instance().sendTableDataRspMsg 	UDC内部zmq同步 	udc_subdbtable.xml *
	|
	|->operateOneCommandUdc 同步UDC，放入队列，http发送						udc_sync.xml，进行数据修改 *
		|
		|->sendCommandZone(sendHttpsMessage(UDC_INCSYNC))
	|
	|->batchOperateOneCommandNe	同步网元（非UDC）							NeBaseNeBeanControl.xml

______________________________________________________________________

1、子网包含一个固网zone(住UDC)，号段为子集
2、子网下有多个fleet，每个fleet支持30个节点zone（从UDC）
3、一个节点zone可以挂在多个fleet，但当前生效的只有一个
	MDC、核心网、MRS属于DEV，devobj数据来源zoneobj（固网zone 主）
	从UDC需要归属到fleet，同步fleetobj中的数据，和从节点zone无关
4、多个子网间号段不能重复
5、下级子网主动向上级子网建链，双方能相互看到状态
6、上级子网触发同步，下级子网生成Json文件，ftp上传到上级
7、下级子网数据中大部分配置都不在上级生效，下级子网用户登陆上级子网会路由到下级子网

VPN 
1、如果不划分VPN，默认ID为65535
2、如果划分了，可以是0,1,2等
3、0是包含所有划分了VPN
4、3GPP没有VPN特性，子网也没有VPN特性
5、VPN和NBI（soap）后续不重要
6、实现上是王兵实现IVPNBean 

USER
1、USER划分为PTTuser（终端） sipUSER（固定摄像头、DC） recoarduser（记录仪）
2、每个User都可以通过id关联到一个类型的用户

无线eAPP610_TD>V100R006>V100R006C00>E 系统设计>E.4 FRS>TTR6.0 eAPP 3GPP分布式特性设计说明书
1、UI已经完成，分支待定
2、需要树型显示，
3、删除Btruncuser代码
4、clear时，用户相关的表



界面 ebs_sub_network!list.action

上级子网发送，接收同步
EbsSubNetworkAction.allsync()
	|
	|->getOneBeanByKey() //获取子网信息，根据ID
	|
	|->getOneBeanByKey() //获取本网信息，根据relationship为0
	|
	|->getVersion() // 子网和本网的版本号不同，返回
	|
	|->getSubnetAllSyncStatusBySubnetId() //全同步中，返回
	|
	|->updateSubnetSyncStatus() // 更新状态为全同步中
	|
	|->querySubnetStates() // 其他网在同步中，不允许同步
	|
	|->updateHeartInfoChangeFlag() // 同步标志置为false，影响心跳？
		|
		|->udcSubnetAllSync()
			|
			|->设置本网id，子网id，子网IP,回调Impl
			|
			|->UdcSubnetLoginImpl.allsync()
				|
				|->updateAllSyncBySubnetId() //更新缓存中的id
				|
				|->UdcSubnetSyncHandler.udcNodeAllSyncReq() 
					|
					|->isFullSyncing()//全同步中，返回
					|
					|->sendHttpsMessage() //发送UDC_SUBNET_ALL_SYNC消息 /v1.0/UDCSubnet/allSyncRequest
					|
					|->rspInfoMap.get() //获取全同步的"allSyncInfo" ftp文件名
					|
					|->udcNodeSyncTask() //进行下载、导入
						|
						|->UdcUpperSubnetSyncImport.excuteSync() //单线程进行
							|
							|->syncProcess()
								|
								|->saveServerParas() //保存FTP、文件名、路径等
								|
								|->updateSubnetSyncStatus() //更新状态同步中
								|
								|->downloadFile() //下载文件
								|
								|->clear() //清楚本网中下级子网信息？
									|
									|->SubnetValidateUtils.getRelatedSubnetIdSet() //返回下级子网集合
									|
									|->getUDCTypeList() //获取需要清除的类，
										当前有UDCUser UDCFixedCameraCategory UDCDCRangeList UDCDepartment UDCUserBTruncAttribute
									|
									|->getEBSTypes() //USER CAMERACATEGORY DCRANGELIST DEPARTMENT BTRUNCUSER
									|
									|->UdcSubnetSyncCleaner.clearObjBySubnetId()
										|
										|->EBSType.USER
											|
											|->serviceInstance.getRecordByRule() //获取表opm_user中subNetInternalId相同的列表
											|
											|->UDCSimpleUser.findUserCategoryByUser() //获取user的类型 用户类别：调度员，摄像头等
											|
											|->simpleUserMap.put() //存储isdn和类型、子网id
											|
											|->serviceInstance.getRecordByRule() //表opm_btrunc_user中找到ISDN号码相同的用户
											|
											|->parameterBeans.add() //放入删除btruncuser的bean
											|
											|->parameterBeans.add() //放入删除user的bean
											|
											|->threadSleepHandle() //队列中有超过5000的命令，等待2分钟再执行
											|
											|->ServerForClientItfImpl.sendCommandList()
												|
												|->EBSOperationAgent.operateOneCommand() //批量的进入了配置流程
												|
												|->DynamicGroupUtil.getIsdnGroupUserListMapByIsdnSet() //isdn对应的群组也都找出来，放进去
										|
										|->EBSType.CAMERACATEGORY 等等 todo 其他的类型还没看，大概就是都删掉
									|
									|->importFile()
										|
										|->SubnetImportManager.importUdcFile()
											|
											|->parseEbsObjectFromFile()
												|
												|->reader.readLine() //放入ObjectList
												|
												|->ExportUtil.decodeFromString() //解析出Json字符串 &前为类名，&后为字符串
												|
												|->UdcSubnetDataAnalyzer.getUDCDeparmentList() //部门处理
													|
													|->UDCSubnetSyncDataDependencyItf.constructDependency()
														|
														|->UDCSubnetSyncDepartmentDependencyconstructDependency() //按照class类型为UDCDepartment过滤出list
													|
													|->addEbsObjectList()
														|
														|->EBSOperationAgent.operateOneCommand() //ADD
												|
												|->同上对CAMERACATEGORY、USER、GROUPUSER、BTRUNCUSER处理
									|
									|->clearUselessBtruncUser()	//清除无效的对象
										|
										|->UDCSubnetSyncCleaner.clearUselessBtruncUser()
											|
											|->executeSQLQuery() //找出opm_btrunc_user中opm_user没有的数据
											|
											|->ServerForClientItfImpl.sendCommandList()//批量处理 DEL
												|
												|->operateOneCommand()
									|
									|->UDCSubnetSyncHandler.udcSubnetAllSyncEnd()
										|
										|->sendHttpsMessage() //发送UDC_SUBNET_ALL_SYNC_END给对端subnet
									|
									|->ServerForClientItf.updateSubnetSyncStatus() //更新状态结束
									
									
									
下级子网生成文件
urlrewrite.xml //注意是UDI工程的，不是web工程的
	|
	|->UdcSubnetSyncApi.allSyncRequestHandle()
		|
		|->JsonUtil.toObject() //解析 
		|
		|->serverForClientItf.getOneBeanByKe() //获取本网和上级的ID
		|
		|->serverForClientItf.querySubnetStates() //获取所有子网状态，未同步、同步中就返回失败
		|
		|->下级子网的子网中有ON_CONNECT_SYNCING状态，不同步
		|
		|->serverForClientItf.updateSubnetSyncStatus() //更新上级子网状态同步中
		|
		|->ServiceForClientItf.excuteUdcSubnetSyncCmd() //导出子网信息
			|
			|->UDCSubnetSyncHandler.exportFile() ///home/ubp/udc/ftpd/opm/syncdata/UDC/Server/
				|
				|->exportFile() //返回相对路径
					|
					|->fullSyncUtils.concat() //组装文件绝对路径
					|
					|->fullSyncUtils.removeOldFile() //删除老文件
					|
					|->ExportManager.export() //真正的导出文件(子网 fleet都会走进来)
						|
						|->exportforSubNet()
							|
							|->getExportServListLower2Upper() //下级到上级的 exportServListLower2Upper包含列表如下
								"SubNetDepartmentExport"
								"SubNetCameraCategoryExport" 
								"SubNetUserExport"
								"SubNetBtruncUserExport"
							|
							|->getM_writers() // new TXTExportWriter()
							|
							|->openAllWriter() //writer打开文件
							|
							|->遍历上述Export
								|
								|->SubNetUserExport.exportFromDB(传入的是上级的ID)
									|
									|->getSonSubNetworkIdSet() //获取返回本网和下级子网的子网ID集合
									|
									|->opmdao.findRecord(UDCUser.class, enhanceRule) //查找属于子网ID集合，且vpnId为65535（即非划VPN的用户）
									|
									|->page.getUserObjects() //获取用户列表
										|
										|->遍历用户列表
											|
											|->getSubNetIdByObjSubNetId() //将子网id为-1的转化成本网id
											|
											|->setSubNetInternalId() //PTTuser将部门和PTTuser设置子网id
											|
											|->setSubNetInternalId() //SIPuser将部门、固定摄像头GISIPC设置子网id，同时清空omcIpcDevices udcdcRangeSet
											|
											|->isCameraUser //摄像头用户不同步
										|
										|->UDCSyncDataDependencyItf.removeDependency() //删除依赖对象，没看懂 todo
								|
								|->writeToFile()
									|
									|->TXTExportWriter.write()
							|
							|->closeAllWriter()
				|
				|->ExportUtil.encodeToString() //将文件路径组成Json
		|
		|->jsonMap.put(RESPONSE, RSP_SUCCESS) //返回http响应






	
						
			
				
